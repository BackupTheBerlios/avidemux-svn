/*
 * DO NOT EDIT THIS FILE - it is generated by Glade.
 */


#  include <config.h>


#include <string.h>
#include <stdio.h>

#include <gtk/gtk.h>

#include "support.h"

#include "ADM_library/default.h"
#include <ADM_assert.h>
#include "xpm/play.xpm"
#include "xpm/stop.xpm"
#include "xpm/forward.xpm"
#include "xpm/Kforward.xpm"
#include "xpm/backward.xpm"
#include "xpm/Kbackward.xpm"
#include "xpm/avidemux_icon.xpm"
#include "xpm/begin.xpm"
#include "xpm/end.xpm"
#include "xpm/markA.xpm"
#include "xpm/markB.xpm"
#include "xpm/about.xpm"
#include "xpm/xpm_prevblack.xpm"
#include "xpm/xpm_nextblack.xpm"
#include "xpm/gnome-calculator.xpm"
#include "xpm/gnome-calculator_small.xpm"
#include "xpm/systray.xpm"
typedef struct name2xpm
{
	const char *name;
	const char **xpm;
}name2xpm;

//static const char *xpm_Kbackward[] = {

name2xpm iconTranslation[]=
{
	{"Kbackward.xpm",		xpm_Kbackward},	
	{"Kbackward.xpm",		xpm_Kbackward},	
	{"Kforward.xpm",		xpm_Kforward},
	{"backward.xpm",		xpm_backward},	
	{"forward.xpm",			xpm_forward},
	{"about.xpm",			xpm_about},
	{"begin.xpm",			xpm_begin},
	{"end.xpm",			xpm_end},
	{"play.xpm",			xpm_play},
	{"stop.xpm",			xpm_stop},
	{"markA.xpm",			xpm_markA},
	{"markB.xpm",			xpm_markB},
	{"xpm_nextblack.xpm",           xpm_nextblack},
	{"xpm_prevblack.xpm",           xpm_prevblack},
        {"avidemux_icon.xpm",           (const char **)avidemux_icon_xpm},
        {"xpm_prevblack.xpm",           xpm_prevblack},
        {"gnome-calculator.xpm",        (const char **)gnome_calculator_xpm},
        {"gnome-calculator_small.xpm",  (const char **)gnome_calculator_small_xpm},
        {"systray.xpm",                 (const char **)systray_xpm}
};
GdkPixbuf	*create_pixbuf                  (const gchar     *filename)
{
 	int nbIcon=sizeof(iconTranslation)/sizeof(name2xpm);
	int found=-1;
	
	for(int i=nbIcon-1;i>=0;i--)
	{
		if(!strcmp(iconTranslation[i].name,filename)) found=i;
	}
	if(found==-1)
	{
		printf("\n Mmmm problem with pixmap button. Did you change the code ?(%s)\n",filename);
		//ADM_assert(0);
                return NULL;
	
	}

   GdkPixbuf *pix=NULL;

   

  pix= gdk_pixbuf_new_from_xpm_data(iconTranslation[found].xpm);
  
  return pix;
}

GtkWidget	*create_pixmap                          (GtkWidget       *widget,
                         					               const gchar     *filename)
{
GdkPixbuf *pix=NULL;
GtkWidget *pixmap=NULL;
 
  UNUSED_ARG( widget );
   
  pix= create_pixbuf    (filename);
  pixmap= gtk_image_new_from_pixbuf(pix);
  return pixmap;
}

GtkWidget	*lookup_widget                          (GtkWidget       *widget,
                         					               const gchar     *widget_name)
{
  GtkWidget *parent, *found_widget;

  for (;;)
    {
      if (GTK_IS_MENU (widget))
        parent = gtk_menu_get_attach_widget (GTK_MENU (widget));
      else
        parent = widget->parent;
      if (!parent)
        parent = (GtkWidget *)g_object_get_data (G_OBJECT (widget), "GladeParentKey");
      if (parent == NULL)
        break;
      widget = parent;
    }

  found_widget = (GtkWidget*) g_object_get_data (G_OBJECT (widget),
                                                 widget_name);
  if (!found_widget)
    g_warning ("Widget not found: %s", widget_name);
  return found_widget;
}

static GList *pixmaps_directories = NULL;

/* Use this function to set the directory containing installed pixmaps. */
void
add_pixmap_directory                   (const gchar     *directory)
{
  pixmaps_directories = g_list_prepend (pixmaps_directories,
                                        g_strdup (directory));
}

/* This is an internally used function to find pixmap files. */
static gchar*
find_pixmap_file                       (const gchar     *filename)
{
  GList *elem;

  /* We step through each of the pixmaps directory to find it. */
  elem = pixmaps_directories;
  while (elem)
    {
      gchar *pathname = g_strdup_printf ("%s%s%s", (gchar*)elem->data,
                                         G_DIR_SEPARATOR_S, filename);
      if (g_file_test (pathname, G_FILE_TEST_EXISTS))
        return pathname;
      g_free (pathname);
      elem = elem->next;
    }
  return NULL;
}

/* This is an internally used function to create pixmaps. */
GtkWidget*
create_pixmap_old                          (GtkWidget       *widget,
                                        const gchar     *filename)
{
  gchar *pathname = NULL;
  GtkWidget *pixmap;

  UNUSED_ARG( widget );

  if (!filename || !filename[0])
      return gtk_image_new ();

  pathname = find_pixmap_file (filename);

  if (!pathname)
    {
      g_warning (_("Couldn't find pixmap file: %s"), filename);
      return gtk_image_new ();
    }

  pixmap = gtk_image_new_from_file (pathname);
  g_free (pathname);
  return pixmap;
}

/* This is an internally used function to create pixmaps. */
GdkPixbuf*
create_pixbuf_old                          (const gchar     *filename)
{
  gchar *pathname = NULL;
  GdkPixbuf *pixbuf;
  GError *error = NULL;

  if (!filename || !filename[0])
      return NULL;

  pathname = find_pixmap_file (filename);

  if (!pathname)
    {
      g_warning (_("Couldn't find pixmap file: %s"), filename);
      return NULL;
    }

  pixbuf = gdk_pixbuf_new_from_file (pathname, &error);
  if (!pixbuf)
    {
      fprintf (stderr, "Failed to load pixbuf file: %s: %s\n",
               pathname, error->message);
      g_error_free (error);
    }
  g_free (pathname);
  return pixbuf;
}

/* This is used to set ATK action descriptions. */
void
glade_set_atk_action_description       (AtkAction       *action,
                                        const gchar     *action_name,
                                        const gchar     *description)
{
  gint n_actions, i;

  n_actions = atk_action_get_n_actions (action);
  for (i = 0; i < n_actions; i++)
    {
      if (!strcmp (atk_action_get_name (action, i), action_name))
        atk_action_set_description (action, i, description);
    }
}

