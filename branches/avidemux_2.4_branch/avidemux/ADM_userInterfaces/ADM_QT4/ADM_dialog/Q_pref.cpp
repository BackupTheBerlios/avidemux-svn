//
/*
 * DO NOT EDIT THIS FILE - it is generated by Glade.
 */

#include "config.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#define Ui_Dialog Ui_prefDialog
#include "ui_pref.h"
#undef Ui_Dialog

#include "default.h"
#include "ADM_toolkit/filesel.h"

# include "prefs.h"
#include "ADM_audiodevice/audio_out.h"
#include "ADM_audio/ADM_audiodef.h"

#include "ADM_assert.h"
#include "GUI_render.h"
#include "ADM_osSupport/ADM_cpuCap.h"
#include "ADM_toolkit/toolkit.hxx"

static void setpp(void);
/*******************************************************/
class prefWindow : public QDialog
{
     Q_OBJECT

 public:
     prefWindow();
     Ui_prefDialog ui;
 public slots:
 private slots:
 private:
};


prefWindow::prefWindow()     : QDialog()
 {
     ui.setupUi(this);
     //connect( (ui.pushButton),SIGNAL(pressed()),this,SLOT(buttonPressed()));
 }
/*******************************************************/

extern void 		AVDM_audioPref( void );

typedef struct stVideoDevice
{
        ADM_RENDER_TYPE type;
        char            *name;

}stVideoDevice;

static stVideoDevice myVideoDevice[]
={
        {RENDER_GTK,"QT (no accel)"},
#ifdef USE_XV
        {RENDER_XV,"Xvideo accel (best)"},
#endif
#ifdef USE_SDL
        {RENDER_SDL,"SDL accel"},
#endif

};

uint8_t DIA_Preferences2(void);

/**
      \fn     DIA_Preferences(void)
      \brief  Show the preference dialog box


*/
uint8_t DIA_Preferences2(void)
{
uint8_t ret=0;
int r;
char *str;
const char *nullstring="";
#ifdef HAVE_AUDIO
AUDIO_DEVICE olddevice,newdevice;
#endif
uint32_t	lavcodec_mpeg=0;
uint32_t        use_odml=0;
uint32_t	autosplit=0;
uint32_t k;
unsigned int renderI;
ADM_RENDER_TYPE render;
uint32_t useTray=0;
uint32_t useMaster=0;
uint32_t useAutoIndex=0;
uint32_t useSwap=0;
uint32_t useNuv=0;
uint32_t mthreads=0;	
uint32_t downmix;
uint32_t mpeg_no_limit=0;

        prefWindow dialog;
        
        //
#define WIDGET(x) (dialog.ui.x)

        if(!prefs->get(FEATURE_USE_SYSTRAY,&useTray)) useTray=0;
        WIDGET(checkBoxSystray)->setChecked(useTray);

        
        if(!prefs->get(FEATURE_MPEG_NO_LIMIT,&mpeg_no_limit)) mpeg_no_limit=0;
          WIDGET(checkBoxDVDNonStd)->setChecked(mpeg_no_limit);

//****************************	
#if 0
#if 0
#define SET_CPU(x,y) gtk_widget_set_sensitive(WID(check##x),0); \
        if(CpuCaps::has##y()) gtk_toggle_button_set_active( GTK_TOGGLE_BUTTON(WID(check##x)),1);
#else
        #define SET_CPU(x,y)
#endif
        SET_CPU(MMX,MMX);
        SET_CPU(MMXEXT,MMXEXT);
        SET_CPU(3DNOW,3DNOW);
        SET_CPU(SSE,SSE);
        SET_CPU(SSE2,SSE2);
#endif        
//****************************
#ifdef HAVE_AUDIO
	olddevice=newdevice=AVDM_getCurrentDevice();
#endif
	
        // Alsa
        if( prefs->get(DEVICE_AUDIO_ALSA_DEVICE, &str) != RC_OK )
                str = ADM_strdup("plughw:0,0");
        WIDGET(lineEditAlsa)->setText(str);
        ADM_dealloc(str);
        // Multithreads
        if(!prefs->get(FEATURE_MULTI_THREAD, &mthreads))
        {
                mthreads=0;		
        }
        WIDGET(spinBox)->setValue(mthreads);
  
        // VCD/SVCD split point		
        if(!prefs->get(SETTINGS_MPEGSPLIT, &autosplit))
        {
                autosplit=690;		
        }
        // Fill entry
        WIDGET(spinBoxSplit)->setValue(autosplit);		
        if(!prefs->get(FEATURE_USE_LAVCODEC_MPEG, &lavcodec_mpeg))
        {
                lavcodec_mpeg=0;		
        }
        WIDGET(checkBoxLavMpeg)->setChecked(lavcodec_mpeg);		
        // Open DML (Gmv)
        if(!prefs->get(FEATURE_USE_ODML, &use_odml))
        {
          use_odml=0;                
        }   
        WIDGET(checkBoxopenDML)->setChecked(use_odml);

        if(!prefs->get(FEATURE_AUDIOBAR_USES_MASTER, &useMaster))
                useMaster=0;
        if(useMaster)
            WIDGET(radioButtonMaster)->setChecked(1);
          else
            WIDGET(radioButtonPCM)->setChecked(1);
//         if(useMaster) RADIO_SET(radiobuttonMaster,1);
//                 else RADIO_SET(radiobuttonPCM,1);


        if(!prefs->get(FEATURE_TRYAUTOIDX, &useAutoIndex))
                useAutoIndex=0;
        WIDGET(checkBoxAutoIndex)->setChecked(useAutoIndex);

        
        if(!prefs->get(FEATURE_SWAP_IF_A_GREATER_THAN_B, &useSwap))
                useSwap=0;
        WIDGET(checkBoxSwapAB)->setChecked(useSwap);


        if(!prefs->get(FEATURE_DISABLE_NUV_RESYNC, &useNuv))
                useNuv=0;
        WIDGET(checkBoxNuv)->setChecked(useNuv);
        // _____________Message level_____________
        //________________________________________

        unsigned int msg=2;
        prefs->get(MESSAGE_LEVEL,&msg);
#define NB_MSG 3
        const char *msgT[NB_MSG]={
            _("No alerts"),
            _("Only Errors"),
            _("All Messages")
        };
        for(int i=0;i<NB_MSG;i++)
          WIDGET(comboBoxMessage)->addItem(msgT[i]);
         WIDGET(comboBoxMessage)->setCurrentIndex(msg);
        
        // ___________Video accel device ______________________________________________
        int vd=0;
        if(prefs->get(DEVICE_VIDEODEVICE,&renderI)!=RC_OK)
        {       
                render=RENDER_GTK;
        }else
        {
                render=(ADM_RENDER_TYPE)renderI;
        }
        for(uint32_t i=0;i<sizeof(myVideoDevice)/sizeof(stVideoDevice);i++)
        {
                if(myVideoDevice[i].type==render)
                        {
                                vd=i;
                        }
                WIDGET(comboBoxVideo)->addItem(myVideoDevice[i].name);
        }
               WIDGET(comboBoxVideo)->setCurrentIndex(vd);
#ifdef HAVE_AUDIO
        // ___________ Downmixing ______________________________________________
        if(prefs->get(DOWNMIXING_PROLOGIC,&downmix)!=RC_OK)
        {       
            downmix=0;
        }
        for( int i=0;i<NB_LOCAL_DOWNMIX;i++)
        {
          WIDGET(comboBoxDownmix)->addItem(localDownmixing[i].desc);
        }
        WIDGET(comboBoxDownmix)->setCurrentIndex(downmix);
	// ___________ Audio accel device ______________________________________________
        
//         combo_box=GTK_COMBO_BOX(WID(comboboxAudioOutput));
        for(uint32_t i=0;i<sizeof(audioDeviceList)/sizeof(DEVICELIST);i++)
        {
                if(audioDeviceList[i].id==olddevice)
                {
                        k=i;
                }
                WIDGET(comboBoxAudioDevice)->addItem(audioDeviceList[i].name);
        }
        WIDGET(comboBoxAudioDevice)->setCurrentIndex(k);
#endif
        //______________________________________________________
        // Callback for button
//         gtk_signal_connect(GTK_OBJECT(WID(buttonPostprocLevel)), "clicked",GTK_SIGNAL_FUNC(setpp),   NULL);
        // __________ run _____________________
        if(QDialog::Accepted==dialog.exec())
        {
                ret=1;
#ifdef HAVE_AUDIO
                // Limit
                mpeg_no_limit=WIDGET(checkBoxDVDNonStd)->checkState();
                prefs->set(FEATURE_MPEG_NO_LIMIT, mpeg_no_limit);
                // Get downmix
                downmix=WIDGET(comboBoxDownmix)->currentIndex();
                prefs->set(DOWNMIXING_PROLOGIC,downmix);
                
                // Get device
                k= WIDGET(comboBoxAudioDevice)->currentIndex();
                newdevice=audioDeviceList[k].id;
                if(newdevice!=olddevice)
                {
                        AVDM_switch(newdevice);
                }
                //
                //alsa device
                str=NULL;
                str=WIDGET(lineEditAlsa)->text().toAscii().data();
                if(str)
                        prefs->set(DEVICE_AUDIO_ALSA_DEVICE, str);
#endif
                uint32_t s;
                s=WIDGET(comboBoxMessage)->currentIndex();
                prefs->set(MESSAGE_LEVEL,s);
                // video device
                k=WIDGET(comboBoxVideo)->currentIndex();
                render=myVideoDevice[k].type;
                renderI=(int)render;
                prefs->set(DEVICE_VIDEODEVICE,renderI);
        
                //**************
                useTray=WIDGET(checkBoxSystray)->checkState();
                prefs->set(FEATURE_USE_SYSTRAY,useTray);
                
                //*************
                if(WIDGET(radioButtonMaster)->isChecked())
                            prefs->set(FEATURE_AUDIOBAR_USES_MASTER,(uint32_t) 1);
                else
                          prefs->set(FEATURE_AUDIOBAR_USES_MASTER,(uint32_t) 0);

                ///*********
                lavcodec_mpeg=WIDGET(checkBoxLavMpeg)->checkState();		
                prefs->set(FEATURE_USE_LAVCODEC_MPEG, lavcodec_mpeg);
                
                use_odml=WIDGET(checkBoxopenDML)->checkState();
                prefs->set(FEATURE_USE_ODML, use_odml);
                
                autosplit=WIDGET(spinBoxSplit)->value();		
                prefs->set(SETTINGS_MPEGSPLIT, autosplit);
                
                //
                mthreads=WIDGET(spinBox)->value();	
                if(mthreads<2) mthreads=0;
                prefs->set(FEATURE_MULTI_THREAD, mthreads);

                useAutoIndex=WIDGET(checkBoxAutoIndex)->checkState();
                prefs->set(FEATURE_TRYAUTOIDX, useAutoIndex);

                useSwap=WIDGET(checkBoxSwapAB)->checkState(); 
                prefs->set(FEATURE_SWAP_IF_A_GREATER_THAN_B, useSwap);

                useNuv=WIDGET(checkBoxNuv)->checkState(); 
                prefs->set(FEATURE_DISABLE_NUV_RESYNC, useNuv);
		
	}
       
	return ret;
}
extern int DIA_getMPParams( uint32_t *pplevel, uint32_t *ppstrength,uint32_t *swap);
void setpp(void)
{
        uint32_t type,strength,uv=0;

        if(!prefs->get(DEFAULT_POSTPROC_TYPE,&type)) type=3;
        if(!prefs->get(DEFAULT_POSTPROC_VALUE,&strength)) strength=3;
        if( DIA_getMPParams( &type,&strength,&uv))
        {
                prefs->set(DEFAULT_POSTPROC_TYPE,type);
                prefs->set(DEFAULT_POSTPROC_VALUE,strength);

        }
//	video_body->setPostProc(type, strength, uv);
}
//EOF

