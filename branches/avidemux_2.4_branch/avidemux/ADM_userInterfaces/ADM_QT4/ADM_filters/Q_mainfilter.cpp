//
/*
 * DO NOT EDIT THIS FILE - it is generated by Glade.
 */

#include "config.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>


#define Ui_Dialog Ui_mainFilterDialog
#include "ui_mainfilter.h"
#undef Ui_Dialog
#include "QStringListModel" 
#include "default.h"
#include "ADM_toolkit/filesel.h"

# include "prefs.h"
#include "ADM_audiodevice/audio_out.h"
#include "ADM_audio/ADM_audiodef.h"

#include "ADM_assert.h"
#include "GUI_render.h"
#include "ADM_osSupport/ADM_cpuCap.h"
#include "ADM_toolkit/toolkit.hxx"
#include "ADM_editor/ADM_edit.hxx"
#include "ADM_video/ADM_genvideo.hxx"
#include "ADM_filter/video_filters.h"
/*******************************************************/
#define NB_TREE 7
static int startFilter[NB_TREE];
static int max=0;
/******************************************************/
extern FILTER_ENTRY allfilters[MAX_FILTER];
extern uint32_t nb_video_filter;
extern FILTER videofilters[MAX_FILTER];
extern uint32_t nb_active_filter;
extern const char  *filterGetNameFromTag(VF_FILTERS tag);
extern ADM_Composer *video_body;

/*******************************************************/
class filtermainWindow : public QDialog
{
     Q_OBJECT

 public:
     filtermainWindow();
 //    virtual ~filtermainWindow();
     void             buildAvailableFilterList(void);
     void             buildActiveFilterList(void);
     Ui_mainFilterDialog ui;
     
     QStringList      allList[NB_TREE];
     QStringListModel allModel[NB_TREE];
     
     QStringList      activeList;
     QStringListModel activeModel;
     
     
 public slots:
 private slots:
 private:
};
/**
        \fn     buildAvailableFilterList(void)
        \brief  build the internal datas needed to handle the list
*/
void filtermainWindow::buildAvailableFilterList(void)
{
  int current_tree=-1;
  
  
  max=0;
  for (uint32_t i = 0; i < nb_video_filter; i++)
    {
      if (allfilters[i].viewable==1)
        {
          QString str; //="<b>";
          str+=allfilters[i].name;
          str+=":";//"</b><br>";
          str+=allfilters[i].description;
          allList[current_tree]+=str;
          max++;
        }else 
        {
                current_tree++;
                if(current_tree>=NB_TREE) break;
                startFilter[current_tree]=i+1;
        }
    }
   
    
    ADM_assert(NB_TREE==7);
    for(int i=0;i<NB_TREE;i++)
    {
      allModel[i].setStringList(allList[i]);
    }
}
  /**
        \fn     buildActiveFilterList(void)
        \brief  Build and display all active filters (may be empty)
*/
void filtermainWindow::buildActiveFilterList(void)
{
  VF_FILTERS fil;
  activeList.clear();
  for (uint32_t i = 1; i < nb_active_filter; i++)
    {
                QString str;
                fil=videofilters[i].tag;

                 str =filterGetNameFromTag(fil);
                 str+= videofilters[i].filter->printConf ();
                 activeList+=str;
    }
    activeModel.setStringList(activeList);

}
  /**
  */
filtermainWindow::filtermainWindow()     : QDialog()
 {
      buildAvailableFilterList();
      buildActiveFilterList();
      ui.setupUi(this);
      
    
    ui.listViewTransform->setModel(&(allModel[0]));
    ui.listViewInterlacing->setModel(&(allModel[1]));
    ui.listViewColors->setModel(&(allModel[2]));
    ui.listViewNoise->setModel(&(allModel[3]));;
    ui.listViewSharpness->setModel(&(allModel[4]));;
    ui.listViewSubtitles->setModel(&(allModel[5]));;
    ui.listViewMisc->setModel(&(allModel[6]));;
      
    ui.listViewActive->setModel(&activeModel);


 }
/*******************************************************/

int GUI_handleVFilter(void);
static void updateFilterList (filtermainWindow *dialog);

/**
      \fn     GUI_handleVFilter(void)
      \brief  Show the main filter window allowing user to add/remove/configure video filters


*/
int GUI_handleVFilter(void)
{
        filtermainWindow dialog;
        if(QDialog::Accepted==dialog.exec())
        {
        }
	return 0;
}

//EOF

