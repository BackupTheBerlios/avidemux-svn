//
/*
 * DO NOT EDIT THIS FILE - it is generated by Glade.
 */

#include "config.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>


#define Ui_Dialog Ui_mainFilterDialog
#include "ui_mainfilter.h"
#undef Ui_Dialog
#include "QStringListModel" 
#include "default.h"
#include "ADM_toolkit/filesel.h"

# include "prefs.h"
#include "ADM_audiodevice/audio_out.h"
#include "ADM_audio/ADM_audiodef.h"

#include "ADM_assert.h"
#include "GUI_render.h"
#include "ADM_osSupport/ADM_cpuCap.h"
#include "ADM_toolkit/toolkit.hxx"
#include "ADM_editor/ADM_edit.hxx"
#include "ADM_video/ADM_genvideo.hxx"
#include "ADM_filter/video_filters.h"
/*******************************************************/
#define NB_TREE 7
static int startFilter[NB_TREE];
static int filterSize[NB_TREE];
static int max=0;
/******************************************************/
extern FILTER_ENTRY allfilters[MAX_FILTER];
extern uint32_t nb_video_filter;
extern FILTER videofilters[MAX_FILTER];
extern uint32_t nb_active_filter;
extern const char  *filterGetNameFromTag(VF_FILTERS tag);
extern ADM_Composer *video_body;
extern AVDMGenericVideoStream *filterCreateFromTag(VF_FILTERS tag,CONFcouple *conf, AVDMGenericVideoStream *in) ;
/*******************************************************/
class filtermainWindow : public QDialog
{
     Q_OBJECT

 public:
     filtermainWindow();
 //    virtual ~filtermainWindow();
     void             buildAvailableFilterList(void);
     void             buildActiveFilterList(void);
     Ui_mainFilterDialog ui;
     
     QListWidget      *allList[NB_TREE];
     
     
     QStringList      activeList;
     QStringListModel activeModel;
     
     
 public slots:
        void add(bool b);
        void remove(bool b);
        void configure(bool b);
        void partial(bool b);
 private slots:
 private:
};

/**

*/
void filtermainWindow::add( bool b)
{
  
  /* Get selection if any */
  int tab=ui.tabWidgetSubtitles->currentIndex();
  ADM_assert(tab>=0 && tab < NB_TREE);
  /* Now that we have the tab, get the selection */
   QListWidgetItem *item=allList[tab]->currentItem();
   if(item)
   {
     int itag=item->type()-1000;
      printf("Tag : %d\n",itag);
      VF_FILTERS tag=(VF_FILTERS) itag;
      // Create our filter...
      
       CONFcouple *coup;
        videofilters[nb_active_filter].filter =
            filterCreateFromTag (tag, NULL, videofilters[nb_active_filter - 1].filter);
        if(!videofilters[nb_active_filter].filter->
                    configure (videofilters[nb_active_filter - 1].filter))
        {
            delete videofilters[nb_active_filter].filter;
            return;
        }
        videofilters[nb_active_filter].filter->getCoupledConf (&coup);
        videofilters[nb_active_filter].tag = tag;
        videofilters[nb_active_filter].conf = coup;
        nb_active_filter++;
        buildActiveFilterList();
   }
}
/**

*/
void filtermainWindow::remove( bool b)
{
  printf("remove\n"); 
}
/**

*/
void filtermainWindow::configure( bool b)
{
  printf("configure\n"); 
}
/**

*/
void filtermainWindow::partial( bool b)
{
  printf("partial\n"); 
}

/**
        \fn     buildAvailableFilterList(void)
        \brief  build the internal datas needed to handle the list
*/
void filtermainWindow::buildAvailableFilterList(void)
{
  int current_tree=-1;
  int current_raw=0;;
  
  max=0;
  for (uint32_t i = 0; i < nb_video_filter; i++)
    {
      if (allfilters[i].viewable==1)
        {
          QString str; //="<b>";
          str+=allfilters[i].name;
          str+=":";//"</b><br>";
          str+=allfilters[i].description;
          max++;
          current_raw++;
          QListWidgetItem *item=new QListWidgetItem(str,allList[current_tree],1000+allfilters[i].tag);
          allList[current_tree]->addItem(item);
          
        }else 
        {
                current_tree++;
                if(current_tree) filterSize[current_tree-1]=current_raw;
                if(current_tree>=NB_TREE) break;
                allList[current_tree]->clear();
                startFilter[current_tree]=i+1;
                current_raw=0;
                
        }
    }
   
    
    ADM_assert(NB_TREE==7);
  
}
  /**
        \fn     buildActiveFilterList(void)
        \brief  Build and display all active filters (may be empty)
*/
void filtermainWindow::buildActiveFilterList(void)
{
  VF_FILTERS fil;
  activeList.clear();
  for (uint32_t i = 1; i < nb_active_filter; i++)
    {
                QString str;
                fil=videofilters[i].tag;

                 str =filterGetNameFromTag(fil);
                 str+= videofilters[i].filter->printConf ();
                 activeList+=str;
    }
    activeModel.setStringList(activeList);

}
  /**
  */
filtermainWindow::filtermainWindow()     : QDialog()
 {
      ui.setupUi(this);
      
#define ASSOCIATE(x,y)   allList[x]=ui.listWidget##y
      ASSOCIATE(0,Transform);
      ASSOCIATE(1,Interlacing);
      ASSOCIATE(2,Colors);
      ASSOCIATE(3,Noise);
      ASSOCIATE(4,Sharpness);
      ASSOCIATE(5,Subtitles);
      ASSOCIATE(6,Misc);
      
      
      buildAvailableFilterList();
      buildActiveFilterList();
      
      
      
    ui.listViewActive->setModel(&activeModel);

    connect((ui.toolButtonConfigure),SIGNAL(clicked(bool)),this,SLOT(configure(bool)));
    connect((ui.toolButtonAdd),SIGNAL(clicked(bool)),this,SLOT(add(bool)));
    connect((ui.pushButtonRemove),SIGNAL(clicked(bool)),this,SLOT(remove(bool)));

    connect(ui.buttonClose, SIGNAL(clicked(bool)), this, SLOT(accept()));
 }
/*******************************************************/

int GUI_handleVFilter(void);
static void updateFilterList (filtermainWindow *dialog);

/**
      \fn     GUI_handleVFilter(void)
      \brief  Show the main filter window allowing user to add/remove/configure video filters


*/
int GUI_handleVFilter(void)
{
        filtermainWindow dialog;
        if(QDialog::Accepted==dialog.exec())
        {
        }
	return 0;
}

//EOF

